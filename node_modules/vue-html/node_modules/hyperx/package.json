{
  "_args": [
    [
      {
        "raw": "hyperx@^2.0.5",
        "scope": null,
        "escapedName": "hyperx",
        "name": "hyperx",
        "rawSpec": "^2.0.5",
        "spec": ">=2.0.5 <3.0.0",
        "type": "range"
      },
      "/Users/zhongwei/ziven/priv/src/zivenvuepluglib/node_modules/vue-html"
    ]
  ],
  "_cnpm_publish_time": 1489101326821,
  "_from": "hyperx@^2.0.5",
  "_hasShrinkwrap": false,
  "_id": "hyperx@2.3.0",
  "_location": "/vue-html/hyperx",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/hyperx-2.3.0.tgz_1489101325077_0.18999598757363856"
  },
  "_npmUser": {
    "name": "substack",
    "email": "substack@gmail.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hyperx@^2.0.5",
    "scope": null,
    "escapedName": "hyperx",
    "name": "hyperx",
    "rawSpec": "^2.0.5",
    "spec": ">=2.0.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vue-html"
  ],
  "_resolved": "http://registry.npm.taobao.org/hyperx/download/hyperx-2.3.0.tgz",
  "_shasum": "70f473d66d4ad550ddd1c83e4be2651276bbf1e2",
  "_shrinkwrap": null,
  "_spec": "hyperx@^2.0.5",
  "_where": "/Users/zhongwei/ziven/priv/src/zivenvuepluglib/node_modules/vue-html",
  "author": {
    "name": "substack"
  },
  "bugs": {
    "url": "https://github.com/substack/hyperx/issues"
  },
  "dependencies": {
    "hyperscript-attribute-to-property": "^1.0.0"
  },
  "description": "tagged template string virtual dom builder",
  "devDependencies": {
    "covert": "^1.1.0",
    "hyperscript": "^1.4.7",
    "tape": "^4.4.0",
    "virtual-dom": "^2.1.1"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dist": {
    "shasum": "70f473d66d4ad550ddd1c83e4be2651276bbf1e2",
    "size": 8807,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/hyperx/download/hyperx-2.3.0.tgz"
  },
  "gitHead": "1578fb7d883da60f3163b9a6ad406525b07b3182",
  "homepage": "https://github.com/substack/hyperx#readme",
  "keywords": [
    "jsx",
    "virtual-dom",
    "vdom",
    "react",
    "hyperscript",
    "template string",
    "template",
    "es6"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "almost",
      "email": "tom@almostobsolete.net"
    },
    {
      "name": "colingourlay",
      "email": "colin@colin-gourlay.com"
    },
    {
      "name": "emilbayes",
      "email": "github@tixz.dk"
    },
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "jameskyburz",
      "email": "james.kyburz@gmail.com"
    },
    {
      "name": "shama",
      "email": "kyle@dontkry.com"
    },
    {
      "name": "slaskis",
      "email": "robert@publicclass.se"
    },
    {
      "name": "substack",
      "email": "substack@gmail.com"
    }
  ],
  "name": "hyperx",
  "optionalDependencies": {},
  "publish_time": 1489101326821,
  "readme": "# hyperx\n\ntagged template string virtual dom builder\n\nThis module is similar to JSX, but provided as a standards-compliant ES6 tagged\ntemplate string function.\n\nhyperx works with [virtual-dom](https://npmjs.com/package/virtual-dom),\n[react](https://npmjs.com/package/react),\n[hyperscript](https://npmjs.com/package/hyperscript), or any DOM builder with a\nhyperscript-style API: `h(tagName, attrs, children)`.\n\nYou might also want to check out the [hyperxify][2] browserify transform to\nstatically compile hyperx into javascript expressions to save sending the hyperx\nparser down the wire.\n\n[2]: https://npmjs.com/package/hyperxify\n\n# compatibility\n\n[Template strings][1] are available in:\nnode 4+, chrome 41, firefox 34, edge, opera 28, safari 9\n\nIf you're targeting these platforms, there's no need to use a transpiler!\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\n\n# examples\n\n## virtual-dom node example\n\n``` js\nvar vdom = require('virtual-dom')\nvar hyperx = require('hyperx')\nvar hx = hyperx(vdom.h)\n\nvar title = 'world'\nvar wow = [1,2,3]\nvar tree = hx`<div>\n  <h1 y=\"ab${1+2}cd\">hello ${title}!</h1>\n  ${hx`<i>cool</i>`}\n  wow\n  ${wow.map(function (w, i) {\n    return hx`<b>${w}</b>\\n`\n  })}\n</div>`\nconsole.log(vdom.create(tree).toString())\n```\n\noutput:\n\n```\n$ node vdom.js\n<div>\n  <h1 y=\"ab3cd\">hello world!</h1>\n  <i>cool</i>\n  wow\n  <b>1</b><b>2</b><b>3</b>\n</div>\n```\n\n## react node example\n\n``` js\nvar React = require('react')\nvar toString = require('react-dom/server').renderToString\nvar hyperx = require('hyperx')\nvar hx = hyperx(React.createElement)\n\nvar title = 'world'\nvar wow = [1,2,3]\nvar tree = hx`<div>\n  <h1 y=\"ab${1+2}cd\">hello ${title}!</h1>\n  ${hx`<i>cool</i>`}\n  wow\n  ${wow.map(function (w, i) {\n    return hx`<b>${w}</b>\\n`\n  })}\n</div>`\nconsole.log(toString(tree))\n```\n\n## hyperscript node example\n\n``` js\nvar h = require('hyperscript')\nvar hyperx = require('hyperx')\nvar hx = hyperx(h)\n\nvar title = 'world'\nvar wow = [1,2,3]\nvar tree = hx`<div>\n  <h1 y=\"ab${1+2}cd\">hello ${title}!</h1>\n  ${hx`<i>cool</i>`}\n  wow\n  ${wow.map(function (w) {\n    return hx`<b>${w}</b>\\n`\n  })}\n</div>`\nconsole.log(tree.outerHTML)\n```\n\n## virtual-dom/main-loop browser example\n\n``` js\nvar vdom = require('virtual-dom')\nvar hyperx = require('hyperx')\nvar hx = hyperx(vdom.h)\n\nvar main = require('main-loop')\nvar loop = main({ times: 0 }, render, vdom)\ndocument.querySelector('#content').appendChild(loop.target)\n\nfunction render (state) {\n  return hx`<div>\n    <h1>clicked ${state.times} times</h1>\n    <button onclick=${onclick}>click me!</button>\n  </div>`\n\n  function onclick () {\n    loop.update({ times: state.times + 1 })\n  }\n}\n```\n\n## react browser example\n\n``` js\nvar React = require('react')\nvar render = require('react-dom').render\nvar hyperx = require('hyperx')\nvar hx = hyperx(React.createElement)\n\nvar App = React.createClass({\n  getInitialState: function () { return { n: 0 } },\n  render: function () {\n    return hx`<div>\n      <h1>clicked ${this.state.n} times</h1>\n      <button onClick=${this.handleClick}>click me!</button>\n    </div>`\n  },\n  handleClick: function () {\n    this.setState({ n: this.state.n + 1 })\n  }\n})\nrender(React.createElement(App), document.querySelector('#content'))\n```\n\n## console.log example\n\n``` js\nvar hyperx = require('hyperx')\n\nvar convertTaggedTemplateOutputToDomBuilder = hyperx(function (tagName, attrs, children) {\n  console.log(tagName, attrs, children)\n})\n\nconvertTaggedTemplateOutputToDomBuilder`<h1>hello world</h1>`\n\n// Running this produces: h1 {} [ 'hello world' ]\n```\n\n\n# api\n\n```\nvar hyperx = require('hyperx')\n```\n\n## var hx = hyperx(h, opts={})\n\nReturn a tagged template function `hx` from a hyperscript-style factory function\n`h`.\n\nValues to use for `h`:\n\n* virtual-dom - `vdom.h`\n* react - `React.createElement`\n* hyperscript - hyperscript\n\nOptionally provide:\n\n* `opts.concat(a, b)` - custom concatenation function to combine quasiliteral\nstrings with expressions. The `h` factory function will receive the objects\nreturned by the concatenation function and can make specific use of them. This\nis useful if you want to implement a pre-processor to generate javascript from\nhyperx syntax.\n* `opts.attrToProp` - turn off attribute to property conversions when `false`\n\n# prior art\n\n* http://www.2ality.com/2014/07/jsx-template-strings.html?m=1\n* http://facebook.github.io/jsx/#why-not-template-literals (respectfully disagree)\n\n# license\n\nBSD\n\n# install\n\n```\nnpm install hyperx\n```\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/substack/hyperx.git"
  },
  "scripts": {
    "coverage": "covert test/*.js",
    "test": "tape test/*.js"
  },
  "version": "2.3.0"
}
